
package wsclient;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Admin", targetNamespace = "http://wsserver/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Admin {


    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPathForPackage", targetNamespace = "http://wsserver/", className = "wsclient.GetPathForPackage")
    @ResponseWrapper(localName = "getPathForPackageResponse", targetNamespace = "http://wsserver/", className = "wsclient.GetPathForPackageResponse")
    @Action(input = "http://wsserver/Admin/getPathForPackageRequest", output = "http://wsserver/Admin/getPathForPackageResponse")
    public String getPathForPackage(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @return
     *     returns wsclient.Package
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addPackage", targetNamespace = "http://wsserver/", className = "wsclient.AddPackage")
    @ResponseWrapper(localName = "addPackageResponse", targetNamespace = "http://wsserver/", className = "wsclient.AddPackageResponse")
    @Action(input = "http://wsserver/Admin/addPackageRequest", output = "http://wsserver/Admin/addPackageResponse")
    public Package addPackage(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        String arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        String arg3,
        @WebParam(name = "arg4", targetNamespace = "")
        String arg4,
        @WebParam(name = "arg5", targetNamespace = "")
        String arg5);

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "deletePackage", targetNamespace = "http://wsserver/", className = "wsclient.DeletePackage")
    @ResponseWrapper(localName = "deletePackageResponse", targetNamespace = "http://wsserver/", className = "wsclient.DeletePackageResponse")
    @Action(input = "http://wsserver/Admin/deletePackageRequest", output = "http://wsserver/Admin/deletePackageResponse")
    public void deletePackage(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @return
     *     returns java.util.List<wsclient.User>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllUsers", targetNamespace = "http://wsserver/", className = "wsclient.GetAllUsers")
    @ResponseWrapper(localName = "getAllUsersResponse", targetNamespace = "http://wsserver/", className = "wsclient.GetAllUsersResponse")
    @Action(input = "http://wsserver/Admin/getAllUsersRequest", output = "http://wsserver/Admin/getAllUsersResponse")
    public List<User> getAllUsers();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns wsclient.User
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addUser", targetNamespace = "http://wsserver/", className = "wsclient.AddUser")
    @ResponseWrapper(localName = "addUserResponse", targetNamespace = "http://wsserver/", className = "wsclient.AddUserResponse")
    @Action(input = "http://wsserver/Admin/addUserRequest", output = "http://wsserver/Admin/addUserResponse")
    public User addUser(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns wsclient.User
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "loginControl", targetNamespace = "http://wsserver/", className = "wsclient.LoginControl")
    @ResponseWrapper(localName = "loginControlResponse", targetNamespace = "http://wsserver/", className = "wsclient.LoginControlResponse")
    @Action(input = "http://wsserver/Admin/loginControlRequest", output = "http://wsserver/Admin/loginControlResponse")
    public User loginControl(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "dummyOp", targetNamespace = "http://wsserver/", className = "wsclient.DummyOp")
    @ResponseWrapper(localName = "dummyOpResponse", targetNamespace = "http://wsserver/", className = "wsclient.DummyOpResponse")
    @Action(input = "http://wsserver/Admin/dummyOpRequest", output = "http://wsserver/Admin/dummyOpResponse")
    public void dummyOp();

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "trackPackage", targetNamespace = "http://wsserver/", className = "wsclient.TrackPackage")
    @ResponseWrapper(localName = "trackPackageResponse", targetNamespace = "http://wsserver/", className = "wsclient.TrackPackageResponse")
    @Action(input = "http://wsserver/Admin/trackPackageRequest", output = "http://wsserver/Admin/trackPackageResponse")
    public void trackPackage(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "addPath", targetNamespace = "http://wsserver/", className = "wsclient.AddPath")
    @ResponseWrapper(localName = "addPathResponse", targetNamespace = "http://wsserver/", className = "wsclient.AddPathResponse")
    @Action(input = "http://wsserver/Admin/addPathRequest", output = "http://wsserver/Admin/addPathResponse")
    public void addPath(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns wsclient.User
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUser", targetNamespace = "http://wsserver/", className = "wsclient.GetUser")
    @ResponseWrapper(localName = "getUserResponse", targetNamespace = "http://wsserver/", className = "wsclient.GetUserResponse")
    @Action(input = "http://wsserver/Admin/getUserRequest", output = "http://wsserver/Admin/getUserResponse")
    public User getUser(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @return
     *     returns java.util.List<wsclient.Package>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllPackages", targetNamespace = "http://wsserver/", className = "wsclient.GetAllPackages")
    @ResponseWrapper(localName = "getAllPackagesResponse", targetNamespace = "http://wsserver/", className = "wsclient.GetAllPackagesResponse")
    @Action(input = "http://wsserver/Admin/getAllPackagesRequest", output = "http://wsserver/Admin/getAllPackagesResponse")
    public List<Package> getAllPackages();

}
